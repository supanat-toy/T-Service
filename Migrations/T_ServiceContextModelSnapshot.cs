// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using T_Service.Data;

namespace TService.Migrations
{
    [DbContext(typeof(T_ServiceContext))]
    partial class T_ServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("T_Service.Models.cDelivery_product", b =>
                {
                    b.Property<long>("delivery_work_id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("created_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<long>("delivery_product_id");

                    b.Property<bool>("isCancelled");

                    b.Property<string>("nameEN");

                    b.Property<string>("nameTH");

                    b.Property<string>("product_code");

                    b.Property<int>("quantity_number");

                    b.Property<DateTime>("updated_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("delivery_work_id");

                    b.ToTable("DeliveryProducts");
                });

            modelBuilder.Entity("T_Service.Models.cDelivery_work", b =>
                {
                    b.Property<long>("delivery_work_id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Tservice_type_id");

                    b.Property<long>("Tservice_work_id");

                    b.Property<long>("Tservice_work_status_id");

                    b.Property<DateTime>("created_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<long>("delivery_address_amphur_id");

                    b.Property<string>("delivery_address_details");

                    b.Property<long>("delivery_address_district_id");

                    b.Property<string>("delivery_address_map_google_url");

                    b.Property<string>("delivery_address_map_image_url");

                    b.Property<string>("delivery_address_phone_number");

                    b.Property<string>("delivery_address_place_name");

                    b.Property<long>("delivery_address_province_id");

                    b.Property<string>("delivery_address_receiver_name");

                    b.Property<int>("delivery_address_zip_code");

                    b.Property<DateTime>("delivery_appointed_datetime");

                    b.Property<double>("delivery_distance_kilometre");

                    b.Property<DateTime>("delivery_finished_datetime");

                    b.Property<bool>("isCancelled");

                    b.Property<string>("member_email");

                    b.Property<string>("receipt_number");

                    b.Property<string>("remark_employee");

                    b.Property<string>("remark_member");

                    b.Property<string>("signature_customer_image_url");

                    b.Property<DateTime>("updated_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("delivery_work_id");

                    b.ToTable("DeliveryWorks");
                });

            modelBuilder.Entity("T_Service.Models.cEvaluated_answer", b =>
                {
                    b.Property<long>("Tservice_type_id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Tservice_work_id");

                    b.Property<DateTime>("created_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<long>("evaluated_answer_id");

                    b.Property<long>("evaluated_question_choice_id");

                    b.Property<long>("evaluated_question_id");

                    b.Property<DateTime>("updated_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Tservice_type_id");

                    b.ToTable("EvaluatedAnswer");
                });

            modelBuilder.Entity("T_Service.Models.cList_Tservice_type", b =>
                {
                    b.Property<long>("Tservice_type_id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("nameEN");

                    b.Property<string>("nameTH");

                    b.HasKey("Tservice_type_id");

                    b.ToTable("ListTserviceTypes");
                });

            modelBuilder.Entity("T_Service.Models.cList_Tservice_work_status", b =>
                {
                    b.Property<long>("list_Tservice_work_status_id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("nameEN");

                    b.Property<string>("nameTH");

                    b.HasKey("list_Tservice_work_status_id");

                    b.ToTable("ListTserviceWorkStatus");
                });

            modelBuilder.Entity("T_Service.Models.cList_evaluated_question", b =>
                {
                    b.Property<long>("evaluated_question_id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Tservice_type_id");

                    b.Property<DateTime>("created_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("hasChoice");

                    b.Property<bool>("isActive");

                    b.Property<string>("nameEN");

                    b.Property<string>("nameTH");

                    b.Property<DateTime>("updated_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<double>("version_number");

                    b.HasKey("evaluated_question_id");

                    b.ToTable("ListEvaluatedQuestions");
                });

            modelBuilder.Entity("T_Service.Models.cList_evaluated_question_choice", b =>
                {
                    b.Property<long>("evaluated_questtion_choice_id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("created_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("nameEN");

                    b.Property<string>("nameTH");

                    b.Property<DateTime>("updated_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<double>("version_number");

                    b.HasKey("evaluated_questtion_choice_id");

                    b.ToTable("ListEvaluatedQuestionChoices");
                });

            modelBuilder.Entity("T_Service.Models.cList_setup_product_accessory", b =>
                {
                    b.Property<long>("list_setup_product_accessory_id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("isHidden");

                    b.Property<string>("nameEN");

                    b.Property<string>("nameTH");

                    b.Property<int>("quantity_available");

                    b.Property<string>("remark");

                    b.Property<double>("setup_product_price");

                    b.Property<double>("setup_product_surplus_price");

                    b.Property<string>("setup_product_surplus_unit_name");

                    b.Property<string>("setup_product_unit_name");

                    b.Property<long>("setup_work_product_type_id");

                    b.HasKey("list_setup_product_accessory_id");

                    b.ToTable("ListSetupAccessoryProducts");
                });

            modelBuilder.Entity("T_Service.Models.cList_setup_product_main", b =>
                {
                    b.Property<long>("setup_product_main_id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("description");

                    b.Property<bool>("isHidden");

                    b.Property<string>("nameEN");

                    b.Property<string>("nameTH");

                    b.Property<string>("remark");

                    b.Property<double>("setup_equipment_price");

                    b.Property<double>("setup_non_equipment_price");

                    b.Property<int>("setup_work_product_type_id");

                    b.HasKey("setup_product_main_id");

                    b.ToTable("ListSetupMainProducts");
                });

            modelBuilder.Entity("T_Service.Models.cMember", b =>
                {
                    b.Property<long>("member_id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("birthday_date");

                    b.Property<DateTime>("created_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("email");

                    b.Property<string>("full_name");

                    b.Property<string>("gender");

                    b.Property<string>("identity_card_number");

                    b.Property<bool>("is_admin");

                    b.Property<string>("password");

                    b.Property<string>("phone_number");

                    b.Property<DateTime>("updated_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("member_id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("T_Service.Models.cMember_book_address", b =>
                {
                    b.Property<long>("member_book_address_id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address_details");

                    b.Property<int>("amphur_id");

                    b.Property<DateTime>("created_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("district_id");

                    b.Property<string>("map_google_url");

                    b.Property<string>("map_image_url");

                    b.Property<string>("member_email");

                    b.Property<string>("phone_number");

                    b.Property<string>("place_name");

                    b.Property<int>("province_id");

                    b.Property<string>("receiver_name");

                    b.Property<DateTime>("updated_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("zip_code");

                    b.HasKey("member_book_address_id");

                    b.ToTable("MemberBookAddresses");
                });

            modelBuilder.Entity("T_Service.Models.cSetup_product", b =>
                {
                    b.Property<long>("setup_product_id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("created_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("isCancelled");

                    b.Property<string>("nameEN");

                    b.Property<string>("nameTH");

                    b.Property<double>("product_accessory_total_price");

                    b.Property<string>("product_code");

                    b.Property<double>("product_main_total_price");

                    b.Property<int>("quantity_number");

                    b.Property<long>("setup_product_main_id");

                    b.Property<long>("setup_product_type_id");

                    b.Property<long>("setup_work_id");

                    b.Property<DateTime>("updated_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("setup_product_id");

                    b.ToTable("SetupProducts");
                });

            modelBuilder.Entity("T_Service.Models.cSetup_product_accessory", b =>
                {
                    b.Property<long>("setup_product_accessory_id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("created_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("isCancelled");

                    b.Property<long>("list_setup_product_accessory_id");

                    b.Property<double>("product_accessory_price");

                    b.Property<double>("product_accessory_quantity");

                    b.Property<string>("product_accessory_surplus_price");

                    b.Property<string>("product_accessory_surplus_quantity");

                    b.Property<long>("setup_product_id");

                    b.Property<long>("setup_work_id");

                    b.Property<DateTime>("updated_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("setup_product_accessory_id");

                    b.ToTable("SetupAccessoryProducts");
                });

            modelBuilder.Entity("T_Service.Models.cSetup_work", b =>
                {
                    b.Property<long>("Tservice_work_id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Tservice_type_id");

                    b.Property<DateTime>("created_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("isCancelled");

                    b.Property<string>("member_email");

                    b.Property<string>("receipt_number");

                    b.Property<string>("remark_employee");

                    b.Property<string>("remark_member");

                    b.Property<DateTime>("setup_appointed_datetime");

                    b.Property<DateTime>("setup_finished_datetime");

                    b.Property<double>("setup_price");

                    b.Property<long>("setup_work_id");

                    b.Property<string>("signature_customer_image_url");

                    b.Property<DateTime>("updated_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Tservice_work_id");

                    b.ToTable("SetupWorks");
                });

            modelBuilder.Entity("T_Service.Models.cSetup_work_product_type", b =>
                {
                    b.Property<long>("setup_work_product_type_id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description");

                    b.Property<string>("nameEN");

                    b.Property<string>("nameTH");

                    b.Property<string>("remark");

                    b.HasKey("setup_work_product_type_id");

                    b.ToTable("SetupWorkProductTypes");
                });

            modelBuilder.Entity("T_Service.Models.cTservice_work", b =>
                {
                    b.Property<long>("Tservice_work_id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Tservice_type_id");

                    b.Property<DateTime>("created_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("updated_datetime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Tservice_work_id");

                    b.ToTable("TserviceWorks");
                });

            modelBuilder.Entity("T_Service.Models.cTservice_work_employee", b =>
                {
                    b.Property<long>("Tservice_work_id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("employee_id");

                    b.HasKey("Tservice_work_id");

                    b.ToTable("TserviceWorkEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
